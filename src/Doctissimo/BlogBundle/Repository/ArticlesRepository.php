<?php

namespace Doctissimo\BlogBundle\Repository;
use Doctissimo\BlogBundle\Entity\Articles;
use Doctissimo\BlogBundle\Helper\PaginatorHelper;
use Doctrine\ORM\EntityRepository;
use PDO;

/**
 * ArticlesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticlesRepository extends EntityRepository
{


    /**
     * @return \Doctrine\DBAL\Connection
     */
    public function databaseConnection(){
        $conn = $this->_em
            ->getConnection();

        return $conn;
    }


    /**
     * Get an article by id from database
     * @param Articles $id
     *
     * @return mixed
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getArticleById(Articles $id){
        $conn = $this->databaseConnection();

        $sql = "SELECT * FROM articles WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bindValue(1, $id);
        $stmt->execute();

        return $stmt->fetch();
    }

    /**
     * Get list of articles from database
     *
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getArticles()
    {
        $conn = $this->databaseConnection();

        $sql = "SELECT id, title, description FROM articles";
        $stmt = $conn->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll();
    }


    /**
     * Save an article in database
     *
     * @param Articles $article
     *
     * @return array
     */
    public function addArticle(Articles $article)
    {
        $conn = $this->databaseConnection();

        $sql = "INSERT INTO articles(title, description) VALUES(:title, :description)";
        $stmt = $conn->prepare($sql);

        $stmt->bindValue(':title', $article->getTitle(), PDO::PARAM_STR);
        $stmt->bindValue(':description', $article->getDescription(), PDO::PARAM_STR);

        $stmt->execute();

        return $stmt->fetchAll();
    }


    /**
     * @param $page
     *
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getArticlesByPage($page)
    {
        $offset = ((int)$page - 1) * PaginatorHelper::GENERIC_ITEM_PAGE;

        $conn = $this->databaseConnection();

        $sql = "SELECT id, title, description FROM articles LIMIT :skip, :max";
        $stmt = $conn->prepare($sql);

        $stmt->bindValue(':skip', $offset, PDO::PARAM_INT);
        $stmt->bindValue(':max',  PaginatorHelper::GENERIC_ITEM_PAGE, PDO::PARAM_INT);


        $stmt->execute();

        return $stmt->fetchAll();
    }

    public function countAllArticles()
    {
        $conn = $this->databaseConnection();

        $sql = "SELECT COUNT(id) FROM articles";
        $stmt = $conn->prepare($sql);
        $stmt->execute();

        return $stmt->fetchColumn();
    }


}
